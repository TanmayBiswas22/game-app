{"version":3,"sources":["assets/bot1.jpg","assets/bot2.png","assets/win_cup2.gif","assets/lose.gif","useGame.js","ChatRoom/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useGame","roomId","useState","gameData","setGameData","socketRef","useRef","useEffect","current","socketIOClient","on","data","incomingData","attemps","map","item","ownedByCurrentUser","user","id","winner","looser","disconnect","sendGameData","selectedOption","emit","ChatRoom","props","useChat","handleSendOption","element","document","getElementById","scrollTop","scrollHeight","length","className","startingNumber","i","key","isPlayerOne","src","bot1","alt","bot2","number","text","newValue","win_cup","onClick","window","location","reload","lose","disabled","App","React","newGame","setNewGame","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e934bafc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bot1.40f44a4a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bot2.3f3af731.png\";","module.exports = __webpack_public_path__ + \"static/media/win_cup2.f866585f.gif\";","module.exports = __webpack_public_path__ + \"static/media/lose.7a513921.gif\";","import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst NEW_TURN = \"turn\";\r\nconst GAME = \"game\";\r\nconst WON = \"won\";\r\nconst LOST = \"lost\";\r\nconst SOCKET_SERVER_URL = \"https://ancient-tundra-88857.herokuapp.com/\";\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\nconst useGame = (roomId) => {\r\n  const [gameData, setGameData] = useState([]);\r\n\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\r\n\r\n    socketRef.current.on(GAME, (data) => {\r\n      const incomingData = {\r\n        ...data\r\n      };\r\n      setGameData(incomingData);\r\n    });\r\n\r\n    socketRef.current.on(WON, (data) => {\r\n      data.attemps.map((item) => {\r\n        item.ownedByCurrentUser = item.user === socketRef.current.id\r\n      })\r\n\r\n      const incomingData = {\r\n        ...data,\r\n        winner:true,\r\n        looser:false\r\n      };\r\n      setGameData(incomingData);\r\n    });\r\n\r\n    socketRef.current.on(LOST, (data) => {\r\n      data.attemps.map((item) => {\r\n        item.ownedByCurrentUser = item.user === socketRef.current.id\r\n      })\r\n\r\n      const incomingData = {\r\n        ...data,\r\n        winner:false,\r\n        looser:true\r\n      };\r\n      setGameData(incomingData);\r\n    });\r\n\r\n    socketRef.current.on(NEW_TURN, (data) => {\r\n      data.attemps.map((item) => {\r\n        item.ownedByCurrentUser = item.user === socketRef.current.id\r\n      })\r\n      const incomingData = {\r\n        ...data\r\n      };\r\n      setGameData(incomingData);\r\n    });\r\n\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  const sendGameData = (selectedOption) => {\r\n      socketRef.current.emit(NEW_TURN, {\r\n        selectedOption: selectedOption,\r\n        gameData: gameData\r\n      });\r\n  };\r\n\r\n  return { gameData, sendGameData };\r\n};\r\n\r\nexport default useGame;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./ChatRoom.css\";\r\nimport useChat from \"../useGame\";\r\nimport bot1 from \"../assets/bot1.jpg\";\r\nimport bot2 from \"../assets/bot2.png\";\r\nimport win_cup from \"../assets/win_cup2.gif\";\r\nimport lose from \"../assets/lose.gif\";\r\nconst ChatRoom = (props) => {\r\n  const { gameData, sendGameData } = useChat('');\r\n  let ownedByCurrentUser = false;\r\n  const handleSendOption = (selectedOption) => {\r\n    sendGameData(selectedOption);\r\n  };\r\n\r\n  useEffect(() => {\r\n    var element = document.getElementById('game-container');\r\n    element.scrollTop = element.scrollHeight;\r\n  }, [gameData]);\r\n  if (gameData.attemps && gameData.attemps.length > 0) {\r\n    ownedByCurrentUser = gameData.attemps[gameData.attemps?.length - 1]?.ownedByCurrentUser;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-room-container\">\r\n      <div className=\"header\"> <h3>Game App</h3></div>\r\n      <h3 className=\"game-name\">Starting Number: {gameData.startingNumber}</h3>\r\n      <div id=\"game-container\" className=\"game-container\">\r\n        <ol className=\"game-data-list\">\r\n          {gameData.attemps && gameData.attemps.map((data, i) => (\r\n            <div\r\n              key={i}\r\n              className={`game-item ${data.ownedByCurrentUser ? \"my-game\" : \"received-game\"\r\n                }`}\r\n            >\r\n              <div>\r\n                {data.isPlayerOne ?\r\n                  <img src={bot1} alt=\"Avatar\" className=\"avatar\" /> :\r\n                  <img src={bot2} alt=\"Avatar\" className=\"avatar\" />}\r\n              </div>\r\n              <div className={`${data.ownedByCurrentUser ? \"my-game-item\" : \"received-game-item\"\r\n                }`}>\r\n                <div className=\"attempt-number\">\r\n                  {data.number}\r\n                </div>\r\n\r\n                <div className=\"attempt-text\">\r\n                  {data.text}\r\n                </div>\r\n                <div className=\"attempt-text\">\r\n                  {data.newValue}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          ))}\r\n          {gameData.winner ?\r\n            <>\r\n              <div className=\"overlay\">\r\n                <img src={win_cup} alt=\"winner\" className=\"game-won-image\" />\r\n                <button className=\"start-newgame-button\" onClick={() => window.location.reload()}>New Game</button>\r\n              </div>\r\n\r\n            </>\r\n            : null}\r\n          {gameData.looser ?\r\n            <>\r\n              <div className=\"overlay\">\r\n                <img src={lose} alt=\"looser\" className=\"game-lose-image\" />\r\n                <button className=\"start-newgame-button\" onClick={() => window.location.reload()}>New Game</button>\r\n              </div>\r\n\r\n            </>\r\n            : null}\r\n        </ol>\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <button disabled={ownedByCurrentUser} onClick={() => handleSendOption(-1)} className={ownedByCurrentUser ? 'send-option-button-disabled' : 'send-option-button'}>\r\n          -1\r\n      </button>\r\n        <button disabled={ownedByCurrentUser} onClick={() => handleSendOption(0)} className={ownedByCurrentUser ? 'send-option-button-disabled' : 'send-option-button'}>\r\n          0\r\n      </button>\r\n        <button disabled={ownedByCurrentUser} onClick={() => handleSendOption(1)} className={ownedByCurrentUser ? 'send-option-button-disabled' : 'send-option-button'}>\r\n          1\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\r\n\r\nfunction App() {\r\n  const [newGame, setNewGame] = React.useState(false);\r\n  return (\r\n    newGame ? <ChatRoom /> :\r\n    <div className=\"home\">\r\n      <button className=\"start-game-button\" onClick={() => setNewGame(true)}>\r\n        Start Game\r\n    </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}